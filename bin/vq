#!/bin/bash

function loop {
    (
        tput reset && tmp="$(mktemp)"  && trap 'rm -f "$tmp"' EXIT && while true
        do
            COLS=$(($(tput cols)-1))
            echo -n "" > "$tmp" && eval "$@" | for i in $(seq $(($(tput lines))))
            do
                IFS= read -r line
                printf "%.${COLS}s$(tput sgr0)\n" "$(printf "%-${COLS}s" "$line")" >> "$tmp"
            done && truncate -s -1 "$tmp" && tput cup 0 0 && cat "$tmp" && sleep 1 || break
        done
    )
}

function main {
    test -n "$PARTITION" && local args=( -p $PARTITION )
    tcol=$(($(tput cols)-105))
    if test $tcol -gt 90; then
        tcol=90
    fi

    read -r -d '' PERL <<'PERL'
        use Term::ANSIColor;
        use Env;
        $counter++;
        BEGIN { 
            open $table, "|ccolumn -t" or die $!;
            $| = 1;
            $xsize=`tput lines`-1; 
            $all=0;
            $highp=0;
            $lowp=0;
            $other_run_total=0;
        };
        if ($F[3]=~/$USER/) {
            if ($F[2] eq $LOWPRIORITY) {
                $lowp++;
            } else {
                $highp++;
            }
            $all++;
            $F[4] eq "R" and $user_run_total++;
        } else {
            $F[4] eq "R" and $other_run_total++;
        };
        $F[4] eq "R" and $totals{$F[3]}++;
        $F[4] eq "PD" and $pending{$F[3]}++;
        $F[4] eq "R" and $anyrunning++;
        $size = $xsize - scalar(keys %totals) - scalar(keys %pending);
        (  $.<7 
           or (  $F[3]=~/$USER/ 
                     and ($F[4] eq "R" or $F[2] != $LOWPRIORITY) 
                     and $user_run_total<15 
                 or $counter % $found==0 and $found<$size-20) 
             or ($F[3]!~/$USER/ and $F[4] eq "R" and (
                $other_run_total<6 and $counter > 1 
                or $other_run_total<3))
        ) and $found<$size-14 and do {

            $_ =~ s/\b$USER\b/colored($USER, "bold magenta")/e;
            $_ =~ s/\bR\b/colored("R", "bold red")/e;
            chomp;
            $_ =~ s/\s+/\t/g;
            my $tabs = () = /\t/g;
            print $table color "bold" if $.==1;
            print $table $.>1?$.-1:"Rank", "\t";
            if ($tabs < 8) {
                $tabs++;
                s/\t([^\t]+)\s*$/\t...\t\1/;
            }
            print $table $_;
            print $table "\n";
            print $table color "reset" if $.==1;
            $found++;
            $counter=0;
            $clean=1;
            next;
        };
        $clean and do {
            print $table "...\t" for 1..8;
            print $table "...\n";
            $found++;
            $clean=0;
        };
        END {
            close $table;
            $, = " ";
            $\ = "\n";
            print;
            print color "bold";
            print "All", "jobs:", $.-1;
            print colored($USER, "bold magenta"), "jobs:", "$all";
            print colored($USER, "bold magenta"), "high priority:", $highp;
            print colored($USER, "bold magenta"), "low priority:", $lowp;
            # print $USER, "jobs:", "$all";
            # print $USER, "high priority:", $highp;
            # print $USER, "low priority:", $lowp;
            print color "reset";

            if ($totals{$USER}) {
                print colored($USER, "bold magenta"), "running:", $totals{$USER};
            } else {
                print colored($USER, "bold magenta"), "running:", 0;
            }
            for $i (sort keys %totals) { 
                if ($i eq $USER) {
                } else {
                    print $i, "running:", $totals{$i};
                }   
            };
            print "";
            if ($pending{$USER}) {
                print colored($USER, "bold magenta"), "pending:", $pending{$USER};
            } else {
                print colored($USER, "bold magenta"), "pending:", "0";
            }
            for $i (sort keys %pending) { 
                if ($i eq $USER) {
                } else {
                    print $i, "pending:", $pending{$i} ;
                }
            }
        }

PERL

    SQUEUE_FORMAT2="JobID:10 ,Name:20 ,QOS:15 ,UserName:8 ,StateCompact:3 ,TimeUsed:9 ,Tres:$tcol ,Reason:20" squeue "${args[@]}" | perl -ane "$PERL" 
}

loop main

