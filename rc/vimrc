" Author: Vivek Myers <vivek.myers@gmail.com>
" Date: 2024-09-02

" writing
nnoremap <C-S> <cmd>w<cr>
inoremap <C-S> <C-O><cmd>w<cr>
nnoremap <C-S><C-S> <cmd>wall<cr><cmd>call utils#savesession()<cr>
imap <C-S><C-S> <C-O><C-S><C-S>
nnoremap <C-S><C-F> <cmd>call utils#forcewrite()<cr>
inoremap <C-S><C-O> <cmd>w<cr>
nnoremap <C-S><C-D> <cmd>wa<cr><cmd>call utils#savesession()<cr><cmd>qa<cr>
nnoremap <C-S><C-L> <cmd>call utils#loadsession()<cr>
nmap ,, <cmd>w<cr>
nmap <F10> <cmd>wa<cr>

"Window Management
nnoremap <C-D> <cmd>call utils#closenext()<cr>
au VimEnter * ++once inoremap <C-D> <C-O><cmd>call utils#closenext()<cr>
nnoremap <C-S><C-Q> <cmd>qa<cr>
nmap <C-S><C-R> <cmd>call utils#reload()<cr>
map <F2> <cmd>call utils#closebuf()<cr>
imap <F2> <C-O><cmd>call utils#closebuf()<cr>
tnoremap <F2> <C-W>:call utils#closebuf()<CR>
nnoremap <leader>q <cmd>bd<cr>
nnoremap <leader>Q <cmd>bd!<cr>
noremap <C-6> <C-^>
map <leader>so :w<cr>:source %<cr>
map <expr> + v:count.'<C-W>+'.v:count.'<C-W>>'
map =+ :copen<cr>:resize 20<cr>
nmap <space>dd <cmd>call utils#diff()<cr>
nmap <space>da <space>a<space>dd
nmap <space>D <cmd>windo diffoff<cr>
nmap <C-S><C-A> <cmd>call tex#main()<cr>

" shortcuts
noremap <C-E> <cmd>cclose\|lclose\|noh\|echo ""<cr>
noremap <C-P> @:<cr>
nnoremap gp `[v`]
noremap ; :
nnoremap "" <cmd>call OSCYankRegister('*')<cr>
set clipboard=unnamed,unnamedplus
set shortmess+=I
vnoremap * y/<C-R>=substitute(escape(@@,'~^$.*?/\[]' . '"' . "'"),"\n","\\\\n","ge")<CR><CR>
vnoremap # y?<C-R>=substitute(escape(@@,'~^$.*?/\[]' . '"' . "'"),"\n","\\\\n","ge")<CR><CR>
" nnoremap <silent> <C-Q> :bnext<cr>
" tnoremap <silent> <C-Q> <C-W>:bnext<cr>
nnoremap <silent> <tab> :bnext<cr>
nnoremap <silent> <S-tab> :bprev<cr>
" tnoremap <silent> <C-tab> <C-W>:bprev<cr>
tnoremap <silent> <C-Q> %debug<cr>
tnoremap <C-up> up<cr>
tnoremap <C-down> down<cr>
nnoremap Y  yg_
inoremap <C-Y> <C-R>=utils#date()<cr>
map <space>& m'yiw*``:s///g<left><left>
vmap <space>& m'*:let @"=@/<cr>``:s///g<left><left>

fun! OpSearch(mot)
    call feedkeys("'[V']:s///g\<left>\<left>", 't')
endfun

map g& m'yiw*``<plug>(operator-search)
vmap g& m'*:let @"=@/<cr>``<plug>(operator-search)

map & m'yiw*``:%s///g<left><left><cmd>silent! call repeat#set("&", v:count)<cr>
vmap & m'*:let @"=@/<cr>``:%s///g<left><left>
map G& m'yiw*``:Ggrep <c-r>=shellescape(@/)<cr><cr>:cdo s///g<left><left>
vmap G& m'*:let @"=@/<cr>``:Ggrep <c-r>=shellescape(@/)<cr><cr>:cdo s///g<left><left>
map g- m'yiw*``:Gsearch <c-r>=substitute(shellescape(@/),'#','\\\\#','g')<cr> *<cr>n:syn match MoreMsg /^[^:]*:[^:]*:/<cr>:autocmd BufWinLeave <buffer> ++once :Greplace<cr>
vmap g- m'*:let @"=@/<cr>``:Gsearch <c-r>=substitute(shellescape(@/),'#','\\\\#','g')<cr> *<cr>n:syn match MoreMsg /^[^:]*:[^:]*:/<cr>:autocmd BufWinLeave <buffer> ++once :Greplace<cr>
nmap <space>pp :%diffput
vmap <space>pp :diffput
nmap <space>oo :%diffget
vmap <space>oo :diffget
nmap !! :!
nmap !. :.!
nmap <expr> ymm ":redir @".v:register." <bar> 1mess <bar> redir END<cr>"
nnoremap <space>/ /\c\<\><left><left>
nmap <c-up> [q
nmap <c-down> ]q


" edit configs
noremap <C-N><C-N> <cmd>e $CONFIGDIR/rc/vimrc<cr>
noremap <C-N><C-G> <cmd>e $CONFIGDIR/rc/gvimrc<cr>
noremap <C-N><C-G> <cmd>e $CONFIGDIR/rc/vim/autoload/plugins.vim<cr>
noremap <C-N><C-F> <cmd>call utils#fileconf()<cr>
noremap <C-N><C-A> <cmd>call utils#autoconf()<cr>
noremap <C-N><C-S> <cmd>call utils#snipconf()<cr>
noremap <C-N><C-M> <cmd>e makefile<cr>
noremap <C-N><C-P> <cmd>e $CONFIGDIR/rc/vim/autoload/load.vim<cr>
noremap <C-N><C-R> <cmd>Dispatch! commit_config<cr>
nnoremap <C-N><C-V> <cmd>VS<cr>
nnoremap <C-N><C-L> <cmd>call utils#localconf()<cr>
nnoremap goo <cmd>silent! !open %<cr>
nnoremap <expr> goc "<cmd>call gtfo#open#file('".glob("<cfile>*",0,1)[0]."')<cr>"

" run commands
noremap M <cmd>Make!<cr>
nnoremap <space><space> :Dispatch<space>
nnoremap <space><leader> :AbortDispatch<cr>:AsyncStop<cr>

nnoremap <leader>cd <cmd>cd %:p:h\|pwd<cr>
nnoremap <leader>cs <cmd>Copilot status<cr>
" nmap <F1> <cmd>Copen<cr><cmd>100cnext<cr><cmd>copen<cr><cmd>call search('^[^/].*<bar>.*<bar>','bc')<cr><cr>
nmap <F1> <cmd>copen<cr><cmd>call search('^[^/].*<bar>.*<bar>','bc')<cr><cr>
nmap <C-F1> <cmd>cprev<cr>
nnoremap <leader>kc <cmd>!pkill -f ctags<cr>

" file navigation
" nnoremap ,e <cmd>try<bar>Explore */%:.<bar>catch<bar>Explore<bar>endtry<cr>
nnoremap ,e :e <cfile>
nnoremap ,E <cmd>Explore<cr>
nnoremap ,v <cmd>try<bar>Vexplore */%:.<bar>catch<bar>Vexplore<bar>endtry<cr>
nnoremap ,r :RemoteExplore <up>
nnoremap ,p <cmd>Explore ~/papers<cr>
nnoremap ,o <cmd>Explore ~/notes<cr>
command! -nargs=* RemoteExplore call utils#remote(<f-args>)
command! -nargs=* Note call utils#note(<f-args>)
command! -nargs=* Fig call utils#fig(<f-args>)
command! -nargs=* Zsh exe "Start! zsh -lic ".shellescape(<q-args>)
command! -nargs=* -complete=file Get exe 'Dispatch! rsync -avz '.(<q-args>->split()->map('shellescape(expand(v:val))')->join(' ')).' ./'
command! -nargs=* -bang -complete=custom,utils#templates Template call utils#template(<bang>0, <f-args>)
command! -nargs=* -complete=custom,utils#mines Mine call utils#mine(<f-args>)
command! -nargs=* Config call utils#conf(<f-args>)
command! -nargs=1 Install call utils#install(<f-args>)
fun! s:commands()
    Alias note Note
    Alias fig Fig
    Alias zsh Zsh
    Alias get Get
    Alias template Template
    Alias mine Mine
    Alias conf Config
endfun

" command! -nargs=* SearchFiles call utils#searchfiles(<f-args>)
" command! -nargs=* FindFiles call utils#findfiles(<f-args>)
" nnoremap <F12> :SearchFiles<space>
" nnoremap <F11> :FindFiles<space>

source ~/.vim/autoload/load.vim
source ~/.vim/autoload/plugins.vim

nmap ,f <cmd>silent! !open %:h<cr>
nmap ,n <cmd>NERDTreeFind<cr>
nmap ,m <cmd>NERDTreeToggle<cr>
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_fastbrowse = 0
let g:netrw_sort_by = 'time'
let g:netrw_sort_direction = 'reverse'
let g:netrw_keepdir = 0

let g:netrw_rsync_cmd = "load sshlib; ssh_wrapper rsync"
let g:netrw_scp_cmd = "load sshlib; ssh_wrapper scp"
let g:netrw_sftp_cmd = "load sshlib; ssh_wrapper sftp"

autocmd FileType netrw setl bufhidden=wipe
set maxmempattern=5000
let g:startdir = getcwd()

if g:startdir != $HOME
    call utils#newdir()
endif

set autoread
set autowrite
set hidden
set exrc

nmap <space>zz <cmd>call zotero#openref()<cr>
nmap <space>ze <cmd>call zotero#select()<cr>
nmap <space>zi <cmd>call zotero#import()<cr>
inoremap <C-z> <C-R>=zotero#cite()<cr><C-O><cmd>silent! call bib#tryadd(g:zotero_added)<cr>
nnoremap <space>za <cmd>call bib#addref()<cr>
nnoremap <space>zo <cmd>call bib#open()<cr>
nnoremap <space>zc <cmd>call bib#copy()<cr>
nnoremap <space>zC <cmd>call bib#append()<cr>
nnoremap <space>zd <cmd>call bib#dedup(1)<cr>


syntax enable
set tabstop=4
set shiftwidth=4
set expandtab
set mouse=a
filetype plugin on
filetype indent on
set completeopt=longest,menuone,noinsert

" inoremap <expr> <cr> getline('.') =~ '\item $' ? '<c-w><c-w>' : '<cr>'

set background=dark
try
    colorscheme solarized
    catch
endtry

set autowrite
set backspace=indent,eol,start
set viminfo='20,<100
set spelllang=en_us
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u
set hlsearch

set undodir=$HOME/.vim/undo
set undofile
call system("mkdir -p ".&undodir)


nmap <space>r <cmd>call utils#reload()<cr>

packadd cfilter
noh

set wildignore+=*/node_modules/*
set wildignore+=*/wandb/*
set wildignore+=*/wandb

" terminal
let g:terminal_ansi_colors = [
  \'#262626', 
  \'#d70000', 
  \'#5f8700', 
  \'#af8700', 
  \'#0087ff', 
  \'#af005f', 
  \'#00afaf', 
  \'#d7d7af', 
  \'#1c1c1c', 
  \'#d75f00', 
  \'#4e4e4e', 
  \'#585858', 
  \'#808080', 
  \'#5f5faf',
  \'#8a8a8a',
  \'#ffffd7' ]
highlight Terminal guibg='#002b36'
highlight Terminal guifg='#93a1a1'
autocmd TerminalOpen * if bufwinnr('') > 0 | setlocal nobuflisted | setlocal bufhidden=wipe | endif
nnoremap <leader>t <cmd>vert term ++close<cr>
nnoremap <leader>T <cmd>vert term ++close ++curwin<cr>
tnoremap <esc><esc> <C-\><C-n>
tnoremap <F1> <C-W>N


set diffopt+=vertical
vmap <silent> <space>dp :diffput<cr>
vmap <silent> <space>dg :diffget<cr>

exe 'set shell='.expand('$SHELL')
set guifont=Meslo\ LG\ S\ Regular\ for\ Powerline:h13


fun! VimSetup()
    Alias pydo py3do
    Alias py py3
    map <C-L> :call utils#refresh()<cr>
    " MapSubpress tt /\<\w/\u\0/g
    " vmap tt <esc>`<tt`>
    MapSubpress tu /\<\w/\u\0/g
    vmap tu <esc>`<tu`>
    MapSubpress tl /\<\w/\l\0/g
    " MapSubpress ts /\(^\|\.\)\s*/\l\0/g
    MapExpress tn utils#untitlecase(v:val)
    vmap tl <esc>`<tl`>
    nmap tt  <Plug>Titlecase
    vmap tt  <Plug>Titlecase
    nmap ttt <Plug>TitlecaseLine
    call operator#user#define('search', 'OpSearch')
    call s:commands()
endfun


augroup vimrc
    autocmd!
    autocmd BufWinEnter quickfix nnoremap <buffer> + <C-W>+<C-W>+
    autocmd DirChanged * call utils#newdir()
    autocmd BufRead,BufNewFile $HOME/**/papers/** call tex#overleaf()
    autocmd BufRead,BufNewFile $HOME/templates/**/init.zsh call zsh#template()
    autocmd BufRead,BufNewFile $HOME/templates/**/* call utils#templatesyntax()
    autocmd BufReadPre *.ipynb call python#pythonsetup()
    autocmd VimEnter * silent! call VimSetup()
    function GoStart(motion)
        normal `[
    endfunction

    call operator#user#define('gostart', 'GoStart')
    map gs <plug>(operator-gostart)

    function GoEnd(motion)
        normal `]
    endfunction

    call operator#user#define('goend', 'GoEnd')
    map ge <plug>(operator-goend)
augroup END

nmap ZS :set foldmethod=syntax<cr>
let $CONDA_EXE = $HOME . "/conda/bin/conda"


let &t_TI = ""
let &t_TE = ""
